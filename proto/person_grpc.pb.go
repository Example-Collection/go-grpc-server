// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonServiceClient is the client API for PersonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonServiceClient interface {
	// 사용자 정보 요청, Unary RPC
	GetPersonInformation(ctx context.Context, in *PersonRequest, opts ...grpc.CallOption) (*PersonResponse, error)
	// 모든 사용자 정보 요청, Server Streaming RPC
	ListPersons(ctx context.Context, in *ListPersonRequest, opts ...grpc.CallOption) (PersonService_ListPersonsClient, error)
	// 다수의 사용자 저장 요청, Client Streaming RPC
	SavePersons(ctx context.Context, opts ...grpc.CallOption) (PersonService_SavePersonsClient, error)
	// 사용자 정보 실시간 요청, Bidirectional Streaming RPC
	AskAndGetPersons(ctx context.Context, opts ...grpc.CallOption) (PersonService_AskAndGetPersonsClient, error)
}

type personServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonServiceClient(cc grpc.ClientConnInterface) PersonServiceClient {
	return &personServiceClient{cc}
}

func (c *personServiceClient) GetPersonInformation(ctx context.Context, in *PersonRequest, opts ...grpc.CallOption) (*PersonResponse, error) {
	out := new(PersonResponse)
	err := c.cc.Invoke(ctx, "/proto.PersonService/GetPersonInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) ListPersons(ctx context.Context, in *ListPersonRequest, opts ...grpc.CallOption) (PersonService_ListPersonsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[0], "/proto.PersonService/ListPersons", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceListPersonsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersonService_ListPersonsClient interface {
	Recv() (*PersonResponse, error)
	grpc.ClientStream
}

type personServiceListPersonsClient struct {
	grpc.ClientStream
}

func (x *personServiceListPersonsClient) Recv() (*PersonResponse, error) {
	m := new(PersonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personServiceClient) SavePersons(ctx context.Context, opts ...grpc.CallOption) (PersonService_SavePersonsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[1], "/proto.PersonService/savePersons", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceSavePersonsClient{stream}
	return x, nil
}

type PersonService_SavePersonsClient interface {
	Send(*PersonRequest) error
	CloseAndRecv() (*BasicResponse, error)
	grpc.ClientStream
}

type personServiceSavePersonsClient struct {
	grpc.ClientStream
}

func (x *personServiceSavePersonsClient) Send(m *PersonRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personServiceSavePersonsClient) CloseAndRecv() (*BasicResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BasicResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personServiceClient) AskAndGetPersons(ctx context.Context, opts ...grpc.CallOption) (PersonService_AskAndGetPersonsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[2], "/proto.PersonService/askAndGetPersons", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceAskAndGetPersonsClient{stream}
	return x, nil
}

type PersonService_AskAndGetPersonsClient interface {
	Send(*PersonRequest) error
	Recv() (*PersonResponse, error)
	grpc.ClientStream
}

type personServiceAskAndGetPersonsClient struct {
	grpc.ClientStream
}

func (x *personServiceAskAndGetPersonsClient) Send(m *PersonRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personServiceAskAndGetPersonsClient) Recv() (*PersonResponse, error) {
	m := new(PersonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonServiceServer is the server API for PersonService service.
// All implementations must embed UnimplementedPersonServiceServer
// for forward compatibility
type PersonServiceServer interface {
	// 사용자 정보 요청, Unary RPC
	GetPersonInformation(context.Context, *PersonRequest) (*PersonResponse, error)
	// 모든 사용자 정보 요청, Server Streaming RPC
	ListPersons(*ListPersonRequest, PersonService_ListPersonsServer) error
	// 다수의 사용자 저장 요청, Client Streaming RPC
	SavePersons(PersonService_SavePersonsServer) error
	// 사용자 정보 실시간 요청, Bidirectional Streaming RPC
	AskAndGetPersons(PersonService_AskAndGetPersonsServer) error
	mustEmbedUnimplementedPersonServiceServer()
}

// UnimplementedPersonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersonServiceServer struct {
}

func (UnimplementedPersonServiceServer) GetPersonInformation(context.Context, *PersonRequest) (*PersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonInformation not implemented")
}
func (UnimplementedPersonServiceServer) ListPersons(*ListPersonRequest, PersonService_ListPersonsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPersons not implemented")
}
func (UnimplementedPersonServiceServer) SavePersons(PersonService_SavePersonsServer) error {
	return status.Errorf(codes.Unimplemented, "method SavePersons not implemented")
}
func (UnimplementedPersonServiceServer) AskAndGetPersons(PersonService_AskAndGetPersonsServer) error {
	return status.Errorf(codes.Unimplemented, "method AskAndGetPersons not implemented")
}
func (UnimplementedPersonServiceServer) mustEmbedUnimplementedPersonServiceServer() {}

// UnsafePersonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonServiceServer will
// result in compilation errors.
type UnsafePersonServiceServer interface {
	mustEmbedUnimplementedPersonServiceServer()
}

func RegisterPersonServiceServer(s grpc.ServiceRegistrar, srv PersonServiceServer) {
	s.RegisterService(&PersonService_ServiceDesc, srv)
}

func _PersonService_GetPersonInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetPersonInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PersonService/GetPersonInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetPersonInformation(ctx, req.(*PersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_ListPersons_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPersonRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonServiceServer).ListPersons(m, &personServiceListPersonsServer{stream})
}

type PersonService_ListPersonsServer interface {
	Send(*PersonResponse) error
	grpc.ServerStream
}

type personServiceListPersonsServer struct {
	grpc.ServerStream
}

func (x *personServiceListPersonsServer) Send(m *PersonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PersonService_SavePersons_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonServiceServer).SavePersons(&personServiceSavePersonsServer{stream})
}

type PersonService_SavePersonsServer interface {
	SendAndClose(*BasicResponse) error
	Recv() (*PersonRequest, error)
	grpc.ServerStream
}

type personServiceSavePersonsServer struct {
	grpc.ServerStream
}

func (x *personServiceSavePersonsServer) SendAndClose(m *BasicResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personServiceSavePersonsServer) Recv() (*PersonRequest, error) {
	m := new(PersonRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonService_AskAndGetPersons_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonServiceServer).AskAndGetPersons(&personServiceAskAndGetPersonsServer{stream})
}

type PersonService_AskAndGetPersonsServer interface {
	Send(*PersonResponse) error
	Recv() (*PersonRequest, error)
	grpc.ServerStream
}

type personServiceAskAndGetPersonsServer struct {
	grpc.ServerStream
}

func (x *personServiceAskAndGetPersonsServer) Send(m *PersonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personServiceAskAndGetPersonsServer) Recv() (*PersonRequest, error) {
	m := new(PersonRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonService_ServiceDesc is the grpc.ServiceDesc for PersonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PersonService",
	HandlerType: (*PersonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPersonInformation",
			Handler:    _PersonService_GetPersonInformation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPersons",
			Handler:       _PersonService_ListPersons_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "savePersons",
			Handler:       _PersonService_SavePersons_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "askAndGetPersons",
			Handler:       _PersonService_AskAndGetPersons_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/person.proto",
}
